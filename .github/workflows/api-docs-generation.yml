name: API Documentation Generation

on:
  push:
    branches: [ main, feat/api-docs-template ]
    paths:
      - 'docs/templates/**'
      - 'scripts/generate-api-docs.py'
      - '.github/workflows/api-docs-generation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/templates/**'
      - 'scripts/generate-api-docs.py'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight UTC

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Add any required Python packages here
        pip install requests

    - name: Generate API documentation
      run: |
        echo "üöÄ Generating API documentation..."
        python scripts/generate-api-docs.py --output docs/api/endpoints.md --report docs/validation-report.json

    - name: Validate documentation
      run: |
        echo "‚úÖ Validating generated documentation..."
        # Check if validation report exists and is valid
        if [ -f "docs/validation-report.json" ]; then
          VALIDATION_RESULT=$(python -c "
          import json
          try:
              with open('docs/validation-report.json', 'r') as f:
                  data = json.load(f)
              print('is_valid:' + str(data['is_valid']))
              print('issues:' + str(len(data['validation_results']['issues'])))
          except Exception as e:
              print('error:' + str(e))
          ")
          
          IS_VALID=$(echo "$VALIDATION_RESULT" | grep 'is_valid:' | cut -d: -f2)
          ISSUE_COUNT=$(echo "$VALIDATION_RESULT" | grep 'issues:' | cut -d: -f2)
          
          if [ "$IS_VALID" = "True" ]; then
            echo "‚úÖ Documentation validation passed"
          else
            echo "‚ùå Documentation validation failed with $ISSUE_COUNT issues"
            exit 1
          fi
        else
          echo "‚ùå Validation report not found"
          exit 1
        fi

    - name: Check for changes
      id: check-changes
      run: |
        git add docs/api/endpoints.md docs/validation-report.json
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üìÑ Documentation changes detected"
          git diff --staged --name-only
        fi

    - name: Commit and push changes
      if: steps.check-changes.outputs.changes == 'true' && github.event_name != 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "docs: auto-generate API documentation [skip ci]"
        git push

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: api-docs-validation-report
        path: docs/validation-report.json

    - name: Upload generated documentation
      uses: actions/upload-artifact@v4
      with:
        name: generated-api-docs
        path: docs/api/endpoints.md

  validate-template:
    runs-on: ubuntu-latest
    needs: generate-api-docs
    if: always()
    
    steps:
    - name: Download validation report
      uses: actions/download-artifact@v4
      with:
        name: api-docs-validation-report

    - name: Parse validation results
      id: validation
      run: |
        if [ -f "validation-report.json" ]; then
          VALIDATION_RESULT=$(python -c "
          import json
          try:
              with open('validation-report.json', 'r') as f:
                  data = json.load(f)
              print('is_valid:' + str(data['is_valid']))
              print('issues_count:' + str(len(data['validation_results']['issues'])))
              print('sections_found:' + str(len(data['validation_results']['sections_found'])))
          except Exception as e:
              print('error:' + str(e))
          ")
          
          IS_VALID=$(echo "$VALIDATION_RESULT" | grep 'is_valid:' | cut -d: -f2)
          ISSUES_COUNT=$(echo "$VALIDATION_RESULT" | grep 'issues_count:' | cut -d: -f2)
          SECTIONS_FOUND=$(echo "$VALIDATION_RESULT" | grep 'sections_found:' | cut -d: -f2)
          
          echo "IS_VALID=$IS_VALID" >> $GITHUB_ENV
          echo "ISSUES_COUNT=$ISSUES_COUNT" >> $GITHUB_ENV
          echo "SECTIONS_FOUND=$SECTIONS_FOUND" >> $GITHUB_ENV
          
          if [ "$IS_VALID" = "True" ]; then
            echo "‚úÖ Template validation passed"
          else
            echo "‚ùå Template validation failed"
          fi
        else
          echo "‚ùå Validation report not available"
          echo "IS_VALID=False" >> $GITHUB_ENV
          echo "ISSUES_COUNT=1" >> $GITHUB_ENV
        fi

    - name: Create validation summary
      run: |
        echo "# üìä API Documentation Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Validation Status:** ${{ env.IS_VALID == 'True' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> $GITHUB_STep_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Sections Found:** ${{ env.SECTIONS_FOUND || 'N/A' }}/5" >> $GITHUB_STEP_SUMMARY
        echo "**Issues Detected:** ${{ env.ISSUES_COUNT || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.IS_VALID }}" = "True" ]; then
          echo "üéâ All validation checks passed! The API documentation template contains all required sections and is ready for use." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è  Validation issues detected. Please check the validation report for details." >> $GITHUB_STEP_SUMMARY
        fi

  notify-success:
    runs-on: ubuntu-latest
    needs: [generate-api-docs, validate-template]
    if: success() && github.event_name != 'pull_request'
    
    steps:
    - name: Success notification
      run: |
        echo "‚úÖ API documentation generation completed successfully!"
        echo "üìÑ Documentation has been updated and committed to the repository."

  notify-failure:
    runs-on: ubuntu-latest
    needs: [generate-api-docs, validate-template]
    if: failure()
    
    steps:
    - name: Failure notification
      run: |
        echo "‚ùå API documentation generation failed!"
        echo "Please check the validation report for details on what needs to be fixed."